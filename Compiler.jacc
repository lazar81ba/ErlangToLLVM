%{
  import java.io.File;
  import java.io.FileOutputStream;
  import java.io.PrintWriter;
  import java.io.BufferedReader;
  import java.io.IOException;
  import java.io.InputStreamReader;
  import java.nio.charset.Charset;
  import java.nio.file.Files;
  import java.nio.file.Paths;
  import java.util.*;

%}

%class     Compiler
%interface CompilerTokens
%semantic  String:yylval
%get       token
%next      yylex()

%token '+' '-' '*' '/' '(' ')' '{' '}' '[' ']' '|' '?' '!' '$' ':' '\'' ',' '.' ';' '<' '>' '#' ARROW EQUAL CATCH LESS_EQUAL GREATER_EQUAL BANG_EQUAL AFTER AND ANDALSO BAND BEGIN BNOT BOR BSL BSR BXOR CASE COND CHAR DIV DOT END FUN IF LET NOT OF OR ORELSE STRING QUERY RECEIVE REM SPEC TRY WHEN XOR ATOM DOUBLE_LESS DOUBLE_GREATER DOUBLE_COLON COLON_MINUS DOUBLE_PIPE INCR DECR CALLBACK FLOAT INTEGER TRIPPLE_DOT EQUAL_COLON_EQUAL EQUAL_BANG_EQUAL BACK_ARROW

%left  '+' '-'
%left  '*' '/'


%%

form : attribute '.'           					       {  }
     | function '.'						                 {  }
     | rule '.'							                   { }
     | function '.'	form					                 { clearExpressions(); }
     ;

attribute : '-' ATOM attr_val					   { }
     | '-' ATOM typed_attr_val					 { }
     | '-' ATOM '(' typed_attr_val ')'				{ }
     | '-' SPEC type_spec	 				{ }
     | '-' CALLBACK type_spec					{ }
     ;

type_spec : spec_fun type_sigs					{ }
     | '(' spec_fun type_sigs ')'				{ }
     ;

spec_fun : ATOM						{}
     | ATOM ':' ATOM						{ }
     | ATOM '/' INTEGER DOUBLE_COLON					{ }
     | ATOM ':' ATOM '/' INTEGER DOUBLE_COLON				{ }
     ;

typed_attr_val : expr ',' typed_record_fields			{ }
     | expr DOUBLE_COLON top_type					{ }
     ;

typed_record_fields : '{' typed_exprs '}'			{ }
     ;

typed_exprs : typed_expr					{ }
     | typed_expr ',' typed_exprs				{ }
     | expr ',' typed_exprs					{}
     | typed_expr ',' exprs					{}
     ;

typed_expr : expr DOUBLE_COLON top_type				{ }
     ;

type_sigs : type_sig						{ }
     | type_sig ';' type_sigs					{ }
     ;

type_sig : fun_type						{}
     | fun_type WHEN type_guards				{ }
     ;

type_guards : type_guard					{ }
     | type_guard ',' type_guards				{}
     ;

type_guard : ATOM '(' top_types ')'				{ }
     | ATOM DOUBLE_COLON top_type					{ }
     ;


top_types : top_type						{ }
     | top_type ',' top_types					{ }
     ;


top_type : ATOM DOUBLE_COLON top_type_100				{ }
     | top_type_100						{}
     ;

top_type_100 : type_200					{}
     | type_200 '|' top_type_100				{ }
     ;

type_200 : type_300 comp_op type_300				{ }
     | type_300							{}
     ;

type_300 : type_300 add_op type_400				{ }
     | type_400							{ }
     ;

type_400 : type_400 mult_op type_500				{}
     | type_500							{ }
     ;

type_500 : prefix_op type					{ }
     | type							{ }
     ;

type : '(' top_type ')'					{ }
   | ATOM							{ }
     | ATOM '(' ')'						{ }
     | ATOM '(' top_types ')'					{  }
     | ATOM ':' ATOM '(' ')'					{  }
     | ATOM ':' ATOM '(' top_types ')'				{  }
     | '[' ']'							{  }
     | '[' top_type ']'						{  }
     | '[' top_type ',' TRIPPLE_DOT ']'				{  }
     | '{' '}'							{  }
     | '{' top_types '}'					{  }
     | '#' ATOM '{' '}'						{  }
     | '#' ATOM '{' field_types '}'				{  }
     | binary_type						{  }
     | INTEGER							{  }
     | FUN '(' ')'						{  }
     | FUN '(' fun_type_100 ')'					{  }
     ;

fun_type_100 : '(' TRIPPLE_DOT ')' ARROW top_type			{  }
     | fun_type							{  }
     ;

fun_type : '(' ')' ARROW top_type				     {  }
     | '(' top_types ')' ARROW top_type				{  }
     ;

field_types : field_type					{  }
     | field_type ',' field_types				{  }
     ;

field_type : ATOM DOUBLE_COLON top_type				{  }
     ;

binary_type : DOUBLE_LESS DOUBLE_GREATER					{  }
     | DOUBLE_LESS bin_base_type DOUBLE_GREATER					{  }
     | DOUBLE_LESS bin_unit_type DOUBLE_GREATER					{  }
     | DOUBLE_LESS bin_base_type ',' bin_unit_type DOUBLE_GREATER		{  }
     ;

bin_base_type : ATOM ':' type					{  }
     ;

bin_unit_type : ATOM ':' ATOM '*' type				{  }
     ;

attr_val : expr						{  }
     | expr ',' exprs						{  }
     | '(' expr ',' exprs ')'					{  }
     ;

function : function_clauses					{ addFunction(); }
     ;

function_clauses : function_clause				{ clearExpressions(); }
     | function_clause ';' function_clauses			{ }
     ;

function_clause : ATOM clause_args clause_guard clause_body 	{  }
     | ATOM clause_args clause_body { currentFunction.functionName = $1; }
     ;

clause_args : argument_list					{ createFunctionArguments(); }
     ;

clause_guard : WHEN guard					{  }
     ;

clause_body : ARROW exprs					{  }
     ;

expr : CATCH expr						{  }
     | expr_100							{ $$ = $1; expressions.add($1); }
     ;

expr_100 : expr_150 '=' expr_100 				{ $$ = createVariable($1, $3); }
     | expr_150 '!' expr_100					{  }
     | expr_150							{ $$ = $1; }
     ;

expr_150 : expr_160 ORELSE expr_150				{  }
     | expr_160							{ $$ = $1; }
     ;

expr_160 : expr_200 ANDALSO expr_160				{  }
     | expr_200							{ $$ = $1; }
     ;

expr_200 : expr_300 comp_op expr_300				{  }
     | expr_300							{ $$ = $1 ;}
     ;

expr_300 : expr_400 list_op expr_300				{  }
     | expr_400							{ $$ = $1; }
     ;

expr_400 : expr_400 add_op expr_500				{ $$ = plusMinus($1, $3); }
     | expr_500							{ $$ = $1; }
     ;

expr_500 : expr_500 mult_op expr_600				{ $$ = multDiv($1, $3); }
     | expr_600							{ $$ = $1; }
     ;

expr_600 : prefix_op expr_700					{  }
     | expr_700							{ $$ = $1; }
     ;

expr_700 : function_call					{ }
     | record_expr						{  }
     | expr_800							{ $$ = $1 ;}
     ;

expr_800 : expr_900 ':' expr_max				{ $$ = $1 + ':' + $3 ;}
     | expr_900							{ $$ = $1 ;}
     ;

expr_900 : '.' ATOM						{  }
     | expr_900	'.' ATOM					{  }
     | expr_max							{ $$ = $1 ;}
     ;

expr_max : ATOM						{ $$ = $1; }
     | atomic							{ $$ = $1; }
     | list							{  }
     | binary							{  }
     | list_comprehension					{  }
     | binary_comprehension					{  }
     | tuple							{  }
     | '(' expr ')'						{  }
     | BEGIN exprs END						{  }
     | if_expr							{  }
     | case_expr						{  }
     | receive_expr						{  }
     | fun_expr							{  }
     | try_expr							{  }
     | query_expr						{  }
     ;

list : '[' ']'							{  }
     | '[' expr tail						{  }
     ;

tail : ']'							{  }
     | '|' expr ']'						{  }
     | ',' expr tail						{  }
     ;

binary : DOUBLE_LESS DOUBLE_GREATER					{  }
     | DOUBLE_LESS bin_elements DOUBLE_GREATER				{  }
     ;

bin_elements : bin_element					{  }
     | bin_element ',' bin_elements				{  }
     ;

bin_element : bit_expr opt_bit_size_expr opt_bit_type_list 	{  }
     ;

bit_expr : prefix_op expr_max					{  }
     | expr_max							{  }
     ;

opt_bit_size_expr : ':' bit_size_expr				{  }
     ;

opt_bit_type_list : '/' bit_type_list				{  }
     ;

bit_type_list : bit_type '-' bit_type_list			{  }
     | bit_type							{  }
     ;

bit_type : ATOM						{  }
     |	ATOM ':' INTEGER					{  }
     ;

bit_size_expr : expr_max					{  }
     ;

list_comprehension : '[' expr DOUBLE_PIPE lc_exprs ']' 		{  }
     ;

binary_comprehension : DOUBLE_LESS binary DOUBLE_PIPE lc_exprs ']' 		{  }
     ;

lc_exprs : lc_expr						{  }
     |	lc_expr ',' lc_exprs					{  }
     ;

lc_expr : expr							{  }
     |	expr BACK_ARROW expr					{  }
     |	binary LESS_EQUAL expr					{  }
     ;

tuple : '{' '}'						{  }
     |	'{' exprs '}'						{  }
     ;

record_expr : '#' ATOM '.' ATOM				{  }
     |	'#' ATOM record_tuple					{  }
     |	expr_max '#' ATOM '.' ATOM				{  }
     |	expr_max '#' ATOM record_tuple				{  }
     |	record_expr '#' ATOM '.' ATOM				{  }
     |	record_expr '#' ATOM record_tuple			{  }
     ;

record_tuple : '{' '}'						{  }
     |	'{' record_fields '}'					{  }
     ;

record_fields : record_field					{  }
     |	record_field ',' record_fields				{  }
     ;

record_field : ATOM EQUAL expr					{  }
     ;

function_call : expr_800 argument_list				{ createFunctionCall($1); }
     ;

if_expr : IF if_clauses END					{  }
     ;

if_clauses : if_clause						{  }
     |	if_clause ';' if_clauses				{  }
     ;

if_clause : guard clause_body					{  }
     ;

case_expr : CASE expr OF cr_clauses END 			{  }
     ;


cr_clauses : cr_clause						{  }
     |	cr_clause ';' cr_clauses				{  }
     ;


cr_clause : expr clause_guard clause_body	 		{  }
     ;


receive_expr : RECEIVE cr_clauses END				{  }
     |	RECEIVE AFTER expr clause_body END			{  }
     |	RECEIVE cr_clauses AFTER expr clause_body END		{  }
     ;


fun_expr : FUN ATOM '/' INTEGER				{  }
     |	FUN ATOM ':' ATOM '/' INTEGER				{  }
     |	FUN fun_clauses END					{  }
     ;

fun_clauses : fun_clause					{  }
     |	fun_clause ';' fun_clauses				{  }
     ;

fun_clause : argument_list clause_guard clause_body		{  }
     ;

try_expr : TRY exprs OF cr_clauses try_catch			{  }
     |	TRY exprs try_catch					{  }
     ;

try_catch : CATCH try_clauses END				{  }
     |	CATCH try_clauses AFTER exprs END			{  }
     |	AFTER exprs END						{  }
     ;

try_clauses : try_clause					{  }
     |	try_clause ';' try_clauses				{  }
     ;

try_clause : expr clause_guard clause_body			{  }
     |	ATOM ':' expr clause_guard clause_body			{  }
     ;

query_expr : QUERY list_comprehension END			{  }
     ;

argument_list : '(' ')'					{  }
     |	'(' exprs ')'						{  }
     ;

exprs : expr							{ }
     |	expr ',' exprs						{ }
     ;

guard : exprs							{  }
     |	exprs ';' guard						{  }
     ;

atomic : CHAR							{ objectTypes.put("char",$1); $$ = $1 ;}
     |	INTEGER 						{objectTypes.put("int",$1); $$ = $1 ;}
     |	FLOAT 							{ objectTypes.put("float",$1); $$ = $1  ;}
     |	STRING 						{ objectTypes.put("char[]",$1); $$ = "\"" + $1 + "\""; }
     ;


prefix_op : '+'						{ $$ = $1; }
     |	'-'							{ $$ = $1; }
     |	BNOT							{  }
     |	NOT							{  }
     ;

mult_op : '/'							{ operator = "/"; }
     |	'*'							{ operator = "*"; }
     |	DIV							{  }
     |	REM							{  }
     |	BAND							{  }
     |	AND							{  }
     ;

add_op : '+'							{ operator = "+"; }
     |	'-'							{ operator = "-"; }
     |	BOR							{  }
     |	BXOR							{  }
     |	BSL							{  }
     |	BSR							{  }
     |	OR							{  }
     |	XOR							{  }
     ;

list_op : INCR							{  }
     |	DECR							{  }
     ;

comp_op : EQUAL						{  }
     |	BANG_EQUAL						{  }
     |	'<'							{  }
     |	LESS_EQUAL						{  }
     |	'>'							{  }
     |	GREATER_EQUAL						{  }
     |	EQUAL_COLON_EQUAL					{  }
     |	EQUAL_BANG_EQUAL					{  }
     ;

rule : rule_clauses						{  }
     ;

rule_clauses : rule_clause					{  }
     |	rule_clause ';' rule_clauses 				{  }
     ;

rule_clause : ATOM clause_args clause_guard rule_body 		{  }
     ;

rule_body : COLON_MINUS lc_exprs 					{  }
     ;

%%

private void yyerror(String msg) {
    System.out.println("ERROR: " + msg);
    System.exit(1);
  }

//Scanner part
//EMPTY token may be needed?
//VAR is treated as ATOM, could need change?

    private static void clearExpressions(){
        expressions.clear();
        objectTypes.clear();
    }

   private static List<Function> functionList = new LinkedList<>();
   private static Function currentFunction= new Function();
   private static List<String> expressions = new LinkedList<>();
   private static Map<String,String> objectTypes = new LinkedHashMap<>();
   private static String operator = new String();

   private static interface FunctionComponent{
       public String generateComponent();
       public String getComponentType();
   }

   private static class Function implements FunctionComponent{
       public String functionName = "main";
       public List<String> passedArguments = new LinkedList<>();
       public String functionReturnType = "void";
       public Map<String, String> definitionArguments = new LinkedHashMap<>();
       public LinkedList<FunctionComponent> functionBody = new LinkedList<>();

       public Function() {}

       public Function(String functionName, List<String> passedArguments){
          this.functionName = functionName;
          this.passedArguments.addAll(passedArguments);
       }

       public void setFunctionReturnType(){
         this.functionReturnType = functionBody.getLast().getComponentType();
       }

       @Override
       public String generateComponent() {
           StringBuilder builder = new StringBuilder();
           builder.append(functionName + "(");
           boolean hasParams = false;
           for( String argument : passedArguments){
               builder.append(argument + ",");
               hasParams = true;
           }
           if(hasParams)
              builder.deleteCharAt(builder.toString().length()-1);
           builder.append(");\n");
           return builder.toString();
       }

       @Override
       public String getComponentType() {
         return functionReturnType;
       }
   }


   private class Variable implements FunctionComponent {
       @Override
       public String generateComponent() {
           return null;
       }

       @Override
       public String getComponentType() {
         return null;
       }
   }

   private static String createVariable(String name, String value) {
       String type = objectTypes.get(value);
       objectTypes.clear();
       return type + " " + name + " = " + value + ";";
   }

   private class MathOperation implements FunctionComponent {

       @Override
       public String generateComponent() {
           return null;
       }

       @Override
       public String getComponentType() {
         return null;
       }
   }

   private static void addFunction(){
     functionList.add(currentFunction);
     currentFunction = new Function();
   }

    private static void createFunctionArguments() {
     currentFunction.definitionArguments.putAll(objectTypes);
     objectTypes.clear();
   }

   private static void createFunctionCall(String functionName){
     if(functionName.equals("io:fwrite")) {
      functionName = "printf";
      for(int i = 0 ; i<expressions.size(); i++) {
          try {
              float value = Float.parseFloat(expressions.get(i));
              ((LinkedList)expressions).addFirst("\"%f\"");
              break;
          } catch(Exception e) {
              System.out.println("It was not a number");
          }
      }
     }
     currentFunction.functionBody.add(new Function(functionName, expressions));
     expressions.clear();

   }

   private static void generateCFile(){
     for(Function function : functionList){
       function.setFunctionReturnType();
       generateFunctionDeclaration(function);
     }

     for(Function function : functionList){
       generateFunctionDefinition(function);
     }
   }

   private static void generateFunctionDeclaration(Function function){
     try {
       if(function.functionName.equals("main"))
          return;
       PrintWriter out = new PrintWriter(new FileOutputStream(new File("bin/test.c"), true));
       StringBuilder builder = new StringBuilder();
       builder.append(function.functionReturnType + " " + function.functionName + "(");
       boolean hasParams = false;
       for (Map.Entry<String, String> entry : function.definitionArguments.entrySet())
       {
           builder.append(entry.getKey() + " " + entry.getValue() + ",");
           hasParams = true;
       }
       if(hasParams)
          builder.deleteCharAt(builder.toString().length()-1);
       builder.append("); \n\n");
       out.append(builder.toString());
       out.close();
     } catch(Exception e) {
         System.out.println(e.getMessage());
     }
   }

   private static void generateFunctionDefinition(Function function) {

       try {
           if(function.functionName.equals("main"))
              function.functionReturnType = "int";
           PrintWriter out = new PrintWriter(new FileOutputStream(new File("bin/test.c"), true));

           StringBuilder builder = new StringBuilder();
           builder.append(function.functionReturnType + " " + function.functionName + "(");
           boolean hasParams = false;
           for (Map.Entry<String, String> entry : function.definitionArguments.entrySet())
           {
               builder.append(entry.getKey() + " " + entry.getValue() + ",");
               hasParams = true;
           }
           if(hasParams)
              builder.deleteCharAt(builder.toString().length()-1);
           builder.append("){ \n");
           for(FunctionComponent component : function.functionBody){
               builder.append(component.generateComponent());
           }
           builder.append("\n }\n \n");

           out.append(builder.toString());
           out.close();
       } catch(Exception e) {
           System.out.println(e.getMessage());
       }
   }

   private static String plusMinus(String firstArg, String secondArg) {
       float first = Float.parseFloat(firstArg);
       float second = Float.parseFloat(secondArg);
       float ret = 0.0f;
       if(operator.equals("+")) {
            ret = first + second;
       } else {
            ret = first - second;
       }
       return Float.toString(ret);
   }

   private static String multDiv(String firstArg, String secondArg) {
       float first = Float.parseFloat(firstArg);
       float second = Float.parseFloat(secondArg);
       float ret = 0.0f;
       if(operator.equals("*")) {
            ret = first * second;
       } else {
            ret = first / second;
       }
       return Float.toString(ret);
   }

   private String source;
   private int start = 0;
   private int current = 0;
   private int line = 1;

 public void setSourceScanner(String source) {
        this.source = source;
    }

  int token;
  String yylval;

int yylex() {
        while (!isAtEnd()) {
      start = current;
	    token=scanToken();
	    if(token!=0)
            	return token;
        }

        return ENDINPUT;
    }

 private boolean isAtEnd() {
        return current >= source.length();
    }

private int scanToken() {
        char c = advance();
        switch (c) {
            case '#': return '#';
            case '(': return '(';
            case ')': return ')';
            case '{': return '{';
            case '}': return '}';
            case '[': return '[';
            case ']': return ']';
            case '|': if(match('|'))
			return DOUBLE_PIPE;
		      else
			return '|';
            case '?': return '?';
            case '!': return '!';
            case '$': return '$';
            case ':': if(match(':'))
		 	 return DOUBLE_COLON;
		      else if(match('-'))
			return COLON_MINUS;
		      else
			return ':';
            case '\'': return '\'';
            case ',': return ',';
            case '.': if(matchTwo('.','.'))
			return TRIPPLE_DOT;
		      else
			 return '.';
            case '-': if(match('>'))
			 return ARROW;
		      else if(match('-'))
			 return DECR;
		      else
			 return '-';
            case '+': if(match('+'))
			return INCR;
		      else
			 return '+';
            case ';': return ';';
            case '*': return '*';
            case '<': if(match('='))
		 	 return LESS_EQUAL;
		      else if(match('-'))
			return BACK_ARROW;
		      else if(match('<'))
			return DOUBLE_LESS;
		      else
			 return '<';
            case '>': if(match('='))
			 return GREATER_EQUAL;
		      else if(match('>'))
			return DOUBLE_GREATER;
		      else
			 return '>';
            case '/': if(match('='))
			 return BANG_EQUAL;
		      else
			 return '/';
            case '=':if(matchTwo(':','='))
                         return EQUAL_COLON_EQUAL;
                     else if(matchTwo('/','='))
                         return EQUAL_BANG_EQUAL;
                     else if(match('='))
                         return EQUAL;
                    else
                        return '=';
            case '%':
                while (peek() != '\n' && !isAtEnd()) advance();
		return 0; //return 0 to do nothing
            case ' ': return 0;
            case '\r': return 0;
            case '\t': return 0;
                // Ignore whitespace.
            case '\n':
                line++;
		return 0;
            case '"': return string();
            default:
                if (isDigit(c)) {
                    return number();
                } else if (isAlpha(c)) {
                    return identifier();
                } else {
                    yyerror(line, "Unexpected character.");
                }
		return 0;
        }
    }

//Helper functions


private int identifier() {
        while (isAlphaNumeric(peek())) advance();

        // See if the identifier is a reserved word.
        String text = source.substring(start, current);
	yylval = text;
	switch (text) {
		case "after": return AFTER;
		case "callback": return CALLBACK;
		case "spec": return SPEC;
		case "and": return AND;
		case "andalso": return ANDALSO;
		case "band": return BAND;
		case "begin": return BEGIN;
		case "bnot": return BNOT;
		case "bor": return BOR;
		case "bsl": return BSL;
		case "bsr": return BSR;
		case "bxor": return BXOR;
		case "case": return CASE;
		case "catch": return CATCH;
		case "cond": return COND;
		case "div": return DIV;
		case "end": return END;
		case "fun": return FUN;
		case "if": return IF;
		case "let": return LET;
		case "not": return NOT;
		case "of": return OF;
		case "or": return OR;
		case "orelse": return ORELSE;
		case "query": return QUERY;
		case "receive": return RECEIVE;
		case "rem": return REM;
		case "try": return TRY;
		case "whon": return WHEN;
		case "xor": return XOR;
		default: return ATOM;
	}
    }

    private boolean isAlpha(char c) {
        return (c >= 'a' && c <= 'z') ||
                (c >= 'A' && c <= 'Z') ||
                c == '_';
    }

    private boolean isAlphaNumeric(char c) {
        return isAlpha(c) || isDigit(c);
    }

    private int number() {
        while (isDigit(peek())) advance();

        // Look for a fractional part.
        if (peek() == '.' && isDigit(peekNext())) {
            // Consume the "."
            advance();

            while (isDigit(peek())) advance();
            yylval = source.substring(start, current);
	          return FLOAT;
        }
	      yylval = source.substring(start, current);
        return INTEGER;
    }

    private char peekNext() {
        if (current + 1 >= source.length()) return '\0';
        return source.charAt(current + 1);
    }

    private boolean isDigit(char c) {
        return c >= '0' && c <= '9';
    }

    private int string() {
        while (peek() != '"' && !isAtEnd()) {
            if (peek() == '\n') line++;
            advance();
        }

        // Unterminated string.
        if (isAtEnd()) {
            yyerror(line, "Unterminated string.");
            return 0;
        }

        // The closing ".
        advance();

        // Trim the surrounding quotes.
        yylval= source.substring(start + 1, current - 1);
        return STRING;
    }

    private char peek() {
        if (isAtEnd()) return '\0';
        return source.charAt(current);
    }

    private boolean match(char expected) {
        if (isAtEnd()) return false;
        if (source.charAt(current) != expected) return false;

        current++;
        return true;
    }

    private boolean matchTwo(char firstExpected, char secondExpected) {
        if (isAtEnd()) return false;
        if (source.charAt(current) != firstExpected || source.charAt(current+1) != secondExpected) return false;

        current=current+2;
        return true;
    }

    private char advance() {
        current++;
        return source.charAt(current - 1);
    }


//Main part

    static boolean hadError = false;
    private static Boolean fileWasOpened = false;

    // private static void genereteTestFunction(){
    //         function.functionName = "main";
    //         function.functionReturnType = "int";
    //         // Map<String,String> map = new LinkedHashMap<>();
    //         // map.put("int","testArg1");
    //         // map.put("double", "testArg2");
    //         // function.definitionArguments = map;
    //         FunctionComponent test = new Function("printf", Arrays.asList("\"test\""));
    //         function.functionBody.add(test);
    //     }

        private static void genereteLLVMCode() {
            try{
                ProcessBuilder builder = new ProcessBuilder("bash", "generateLLVM.sh");
                builder.inheritIO();
                Process process = builder.start();
                int exitCode = process.waitFor();
            }catch(Exception e){
              e.printStackTrace();
            }
        }




    public static void main(String[] args) throws IOException {
        createCFile();
        //genereteTestFunction();
        if (args.length > 1) {
            System.out.println("Usage: erl [script]");
        } else if (args.length == 1) {
            runFile(args[0]);
            generateCFile();
            genereteLLVMCode();
        } else {
            runPrompt();
        }
    }



    private static void createCFile(){
      try {
          PrintWriter out = new PrintWriter(new File("bin/test.c"));
          if(!fileWasOpened) {
              out.write("#include <stdio.h>\n \n");
              fileWasOpened = true;
          }
          out.close();
      } catch(Exception e) {
          System.out.println(e.getMessage());
      }
    }

    private static void runFile(String path) throws IOException {
        byte[] bytes = Files.readAllBytes(Paths.get(path));
        run(new String(bytes, Charset.defaultCharset()));

        // Indicate an error in the exit code.
        if (hadError) System.exit(65);
    }

    private static void runPrompt() throws IOException {
        InputStreamReader input = new InputStreamReader(System.in);
        BufferedReader reader = new BufferedReader(input);

        for (;;) {
            System.out.print("> ");
            run(reader.readLine());
            hadError = false;
        }
    }

    private static void run(String source) {
        Compiler test = new Compiler();
	test.setSourceScanner(source);
        test.yylex();
	test.parse();
    // closingLLFile();
    }

    private static void yyerror(int line, String message)  { //Nie wiem czy zadziala
        report(line, "", message);
    }

    private static void report(int line, String where, String message) {
        System.err.println(
                "[line " + line + "] Error" + where + ": " + message);
        hadError = true;
    }
